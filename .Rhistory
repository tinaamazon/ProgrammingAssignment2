m_pollutant <- mean(m_sulfate, na.rm = TRUE)
}
else if (pollutant == "nitrate") {
m_pollutant <- mean(m_nitrate, na.rm = TRUE)
}
else {
print("pollutant invalid or missing")
}
m_pollutant
}
history()
pollutantmean("~/R/specdata", "nitrate", 70)
print(dataset)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
m_sulfate = vector() # initialize as vector to get NA where needed
m_nitrate = vector()
for (i in id){
if (i < 10) {
monitor <- paste0("00", i)
}
else if (i <100) {
monitor <- paste0("0", i)
}
else {
monitor <- i
}
fn <- paste(monitor, "csv", sep = "." )
print(fn)
filename <- paste(directory, fn, sep = "/")
dataset <- matrix()
dataset <- read.csv(filename) # read csv file into a matrix
## Computes the mean of all columns of a matrix
column_mean <- function(m) {
nc <- ncol(m)
means = numeric(nc) # gives numeric vector (0, 0, 0, 0)
# Columns of data set:
# 1: Date
# 2: sulfate
# 3: nitrate
# 4: ID (same as monitor in file name)
for (j in 2:3) {
means[j] <- mean(m[, j], na.rm = TRUE)
print("======means von column ")
print(j)
print(means[j])
}
means
}
means <- column_mean(dataset)
#print(means)
m_sulfate[i] <- means[2] # 2nd column in dataset
m_nitrate[i] <- means[3] # 3rd column in dataset
print(m_sulfate)
print(m_nitrate)
} # all monitors handled now
if (pollutant == "sulfate") {
m_pollutant <- mean(m_sulfate, na.rm = TRUE)
}
else if (pollutant == "nitrate") {
m_pollutant <- mean(m_nitrate, na.rm = TRUE)
}
else {
print("pollutant invalid or missing")
}
m_pollutant
}
pollutantmean("~/R/specdata", "nitrate", 70:72)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
m_sulfate = vector() # initialize as vector to get NA where needed
m_nitrate = vector()
for (i in id){
if (i < 10) {
monitor <- paste0("00", i)
}
else if (i <100) {
monitor <- paste0("0", i)
}
else {
monitor <- i
}
fn <- paste(monitor, "csv", sep = "." )
print(fn)
filename <- paste(directory, fn, sep = "/")
dataset <- matrix()
print("xxxxxxxxxxx")
print(dataset)
print("yyyyyyyyyyy")
dataset <- read.csv(filename) # read csv file into a matrix
print("yyyyyyyyyyy")
## Computes the mean of all columns of a matrix
column_mean <- function(m) {
nc <- ncol(m)
means = numeric(nc) # gives numeric vector (0, 0, 0, 0)
# Columns of data set:
# 1: Date
# 2: sulfate
# 3: nitrate
# 4: ID (same as monitor in file name)
for (j in 2:3) {
means[j] <- mean(m[, j], na.rm = TRUE)
print("======means von column ")
print(j)
print(means[j])
}
means
}
means <- column_mean(dataset)
#print(means)
m_sulfate[i] <- means[2] # 2nd column in dataset
m_nitrate[i] <- means[3] # 3rd column in dataset
print(m_sulfate)
print(m_nitrate)
} # all monitors handled now
if (pollutant == "sulfate") {
m_pollutant <- mean(m_sulfate, na.rm = TRUE)
}
else if (pollutant == "nitrate") {
m_pollutant <- mean(m_nitrate, na.rm = TRUE)
}
else {
print("pollutant invalid or missing")
}
m_pollutant
}
pollutantmean("~/R/specdata", "nitrate", 70:72)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
m_sulfate = vector() # initialize as vector to get NA where needed
m_nitrate = vector()
for (i in id){
if (i < 10) {
monitor <- paste0("00", i)
}
else if (i <100) {
monitor <- paste0("0", i)
}
else {
monitor <- i
}
fn <- paste(monitor, "csv", sep = "." )
print(fn)
filename <- paste(directory, fn, sep = "/")
dataset <- matrix()
print("xxxxxxxxxxx")
print(dataset)
print("yyyyyyyyyyy")
dataset <- read.csv(filename) # read csv file into a matrix
print(dataset)
print("zzzzzzzzzzz")
## Computes the mean of all columns of a matrix
column_mean <- function(m) {
nc <- ncol(m)
means = numeric(nc) # gives numeric vector (0, 0, 0, 0)
# Columns of data set:
# 1: Date
# 2: sulfate
# 3: nitrate
# 4: ID (same as monitor in file name)
for (j in 2:3) {
means[j] <- mean(m[, j], na.rm = TRUE)
print("======means von column ")
print(j)
print(means[j])
}
means
}
means <- column_mean(dataset)
#print(means)
m_sulfate[i] <- means[2] # 2nd column in dataset
m_nitrate[i] <- means[3] # 3rd column in dataset
print(m_sulfate)
print(m_nitrate)
} # all monitors handled now
if (pollutant == "sulfate") {
m_pollutant <- mean(m_sulfate, na.rm = TRUE)
}
else if (pollutant == "nitrate") {
m_pollutant <- mean(m_nitrate, na.rm = TRUE)
}
else {
print("pollutant invalid or missing")
}
m_pollutant
}
pollutantmean("~/R/specdata", "nitrate", 70)
?gl
?tapply
?gl
gl(2, 8, labels = c("Control", "Treat"))
gl(3,10)
x <- c(rnorm(10), runif(10), rnorm(10,1))
x
z <- gl(3,10)
z
tapply(x, z, mean)
?tapply
tapply(x, z)
tapply(x, z, range)
x
split(x, z)
?split
library(datasets)
head(airquality)
tail(airquality)
?interaction
a <- gl(2, 4, 8)
b <- gl(2, 2, 8, labels = c("ctrl", "treat"))
s <- gl(2, 1, 8, labels = c("M", "F"))
interaction(a, b)
interaction(a, b, s, sep = ":")
str?
?str
?condition
?invisible
?load
printmsg <- function(x){print("x is equal "); print(x)}
printmsg(22)
printmsg <- function(x){print("x is equal "); print(x); invisible(x)}
printmsg(22)
printmsg <- function(x){print("x is equal "); print(x); invisible(x)}
printmsg <- function(x){print("x is equal "); print(x);
invisible(x)
}
printmsg(22)
y <- printmsg(22)
y
y <- printmsg(NA)
y
mrsn(x)
mean(x)
mean(tttttt)
traceback()
?lm
lm(y~x)
traceback()
debug(lm)
lm(y~x)
p
q
quit
?options
options(error="recover"")
options(error="recover")
options(error=recover)
read.csv("nosuchfile")
getenv()
library(datasets)
data(iris)
?iris
iris
head(iris)
b <- colMeans(iris$SepalLength)
head(iris)
iris$Sepal.Length
iris$Species
isl <- iris$Sepal.Length
class(isl)
length(isl)
f <- gl(3,50, label=c("setosa", "versicolor", "virginica"))
f
tapply(isl,f,mean)
colMeans(iris)
iris
rowMeans(iris[, 1:4])
colMeans(iris[, 1:4])
t <- iris[, 1:4]
class t
t <- (iris[, 1:4])
t
class(t)
t <- (iris[, 1:4]
t <- iris[, 1:4]
class(t)
class(iris)
colMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
colMeans(iris[, 1:4])
library(datasets)
data(mtcars)
mtcars
head(mtcars)
class(mtcars)
split(mtcars, mtcars$cyl)
s <-split(mtcars, mtcars$cyl)
class(s)
lapply(s,mean)
lapply(s,mean,na.rm=TRUE)
lapply(s$mpg,mean,na.rm=TRUE)
s
lapply(s'mpg'',mean,na.rm=TRUE)
lapply(s'mpg,mean,na.rm=TRUE)
lapply(s'mpg',mean,na.rm=TRUE)
lapply(s[[mpg]],mean,na.rm=TRUE)
sapply(mtcars, cyl, mean)
mtcars
with(mtcars, tapply(mpg, cyl, mean))
?with
colMeans(mtcars[,$hp])
colMeans(mtcars[,4])
mtcars$hp
mtcars
mtcars$hp
lapply(x, function(r4) r4[,4])
lapply(x, function(firstcol) firstcol[1,])
lapply(mtcar, function(firstcol) firstcol[1,])
library(datasets)
data(mtcars)
mtcars
m <- lapply(mtcars, function(firstcol) firstcol[1,])
mtcars
mtcars$mpg
means(mtcars$mpg)
mean(mtcars$mpg)
?split
c <- mtcars$cyl
c
d <- split(mtcars,c)
d
d <- split(mtcars,c)
res <- lapply(d,mean)
d$mpg
d[,1]
d
mtcars$`8`
mtcars[$`8`]
d$`8`
res <- lapply(d$`8`,mean)
res
res <- lapply(d$`8`[,1],mean)
res
res <- lapply(d$`4`,mean)
res
res1 <- lapply(d$`4`,mean)
r <- res1 - r
res1 <- sapply(d$`4`,mean)
res1
res <- sapply(d$`8`,mean)
res
rr <- 26.6636364 - 15.1000000
rr
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
82.63636 - 209.21429
tapply(mtcars$mpg, mtcars$cyl, mean)
tail(mtcars)
mtcars$mpg
mtcars$hp
tapply(mtcars$carb, mtcars$cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(hp$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
82.63636 - 209.21429
?NULL
source("cacheVector"")
source("cacheVector")
source("cacheVector".R)
source("cacheVector.R")
chdir("R")
cd("R")
help.search(directory)
help.search("directory")
?directory
?getenv
?getdir
?getwd
getwd()
setwd()
setwd(./R)
setwd(~/R)
dir()
setwd("~/R")
dir()
source("cacheVector.R")
args(makeVector)
x <- c(1,2,7)
class(x)
makeVector(x)
history()
source("cacheVector.R")
source("cacheVector.R")
xx <- c(9,8,7,6,5)
cachemean(xx)
args(cachemean)
xx
class(xx)
source("cacheVector.R")
x
xx
cachemean(xx)
source("cacheVector.R")
cachemean
cachemean(xx)
cachemean(x)
a <- makeVector(c(1,3,5))
a$get()
a$getmean(
)
a <- makeVector(c(1,3,5))
a$get()
a$set(c(9,7,5,3,1))
a$get
a$get()
a$getmean()
a$getmean(c(9,7,5,3,1))
a$getmean()
a$setmean(5)
a$getmean()
a$setmean(99)
a$getmean()
source("cacheVector.R")
x <- NULL
xx <- NULL
makeVector(c(1,3,5,7))
a <- makeVector(c(1,3,5,7))
a$get()
a$getmean()
a$setmean(99)
a$getmean()
a$setmean(4)
a$getmean()
source("cacheVector.R")
cachemean(a)
b <- makeVector(c(10,11,12))
cachemean(b)
m <- c(1:4,2,3)
m
m <- dataframe(c(1:4,2,3))
m <- matrix(c(1:4,2,3))
m
m <- matrix(c(1:4,2,2))
m
m <- matrix(c(1:4,nrow=2,ncol=2))
m
m <- matrix(1:4,nrow=2,ncol=2)
m
y <- solve(x)
?solve
dir
dir()
setwd("ProgrammingAssignment2)
setwd("ProgrammingAssignment2")
dir()
yy
xx
source("cacheMatrix.R")
makeCacheMatrix(matrix(1:4,2,2))
source("cacheMatrix.R")
makeCacheMatrix(matrix(1:4,2,2))
a <- makeCacheMatrix(matrix(1:4,2,2))
a
a$get
a$get()
a$getinv()
a$setinv(matrix(10:13,2,2))
a$getinv()
source("cacheMatrix.R")
a
a.get()
a$get()
b <- makeCacheMatrix(matrix(1:4,2,2))
c <- cacheSolve(b)
c
c <- cacheSolve(b)
source("cacheMatrix.R")
b <- makeCacheMatrix(matrix(1:4,2,2))
c <- cacheSolve(b)
c$getinv
c
c <-matrix(1:9, nrow=3, ncol=3)
c
makeCacheMatrix(c)
t <- makeCacheMatrix(c)
t$get()
t$getinv()
cacheSolve(t)
c <-matrix(1:4, nrow=2, ncol=2)
c
t <- makeCacheMatrix(c)
cacheSolve(t)
cacheSolve(t)
source("cacheMatrix.R")
source("cacheMatrix.R")
